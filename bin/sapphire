#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), '../lib')
require 'fileutils'
require 'optparse'
require 'sapphire'

Version = Sapphire::VERSION

opt = OptionParser.new <<EOS
Sapphire is a ruby to perl compiler.
Usage: sapphire [options]
EOS
OPTS = {:prettify => true}
opt.on('-o FILENAME', 'specify the filename for output') {|v| OPTS[:output] = v}
opt.on('-O DIRNAME', 'specify the dirname for output') {|v| OPTS[:outdir] = v}
opt.on('-p [YES|no]', 'specify whether prettify the output or not') {|v| OPTS[:prettify] = v.to_s.downcase != 'no'}
opt.on('-t [PERL|s]', 'specify the output filetype') {|v| OPTS[:ruby_parse] = v}
opt.on('-e COMMAND', 'one line of script') {|v| (OPTS[:command] ||= []) << v}
opt.parse! ARGV

if OPTS[:ruby_parse] == 's'
  if OPTS[:command]
    Sapphire.convert_string(OPTS[:command].join("\n"), 's')
  else
    Sapphire.convert_file(ARGF, 's')
  end
else
#  if 1 < ARGV.size && OPTS[:output]
#    puts 'You cannot use the output (-o) parameter for more than one target files.'
#    exit
#  end

  type = OPTS[:ruby_parse] 
  type = nil if type and ['p', 'pl', 'perl'].include? type.downcase

  if ARGV.empty? && OPTS[:command]
    puts Sapphire.convert_string(OPTS[:command].join("\n"), type)
    exit
  end

  ARGV.map{|arg| Dir.glob arg}.flatten.each do |filename|
    perl = OPTS[:command] ? Sapphire.convert_string(OPTS[:command].join("\n"), type) : Sapphire.convert_file(File.new(filename), type)

    if OPTS[:prettify] && `which perltidy`.empty?
      OPTS[:prettify] = false
      STDERR.puts "# Please install perltidy to prettify the generated code: `sudo cpan -i Perl::Tidy'"
    end

    if OPTS[:prettify]
      require 'tempfile'
      Tempfile.open 'sapphire' do |tmp|
        tmp.write perl
        tmp.flush
        perl = `perltidy -st #{tmp.path}`
      end
    end

    if OPTS[:output]
      File.open(OPTS[:output], 1 < ARGV.size ? 'a' : 'w') do |file|
        file.puts perl
      end
    elsif OPTS[:outdir]
      new_filename = File.join OPTS[:outdir], filename.sub(%r|#{File.extname(filename)}$|, '.pm')
      FileUtils.mkdir_p File.dirname(new_filename)
      File.open(new_filename, 'w') do |file|
        file.puts perl
      end
    else
      puts perl
    end
  end
end
